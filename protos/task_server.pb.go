// Code generated by protoc-gen-go. DO NOT EDIT.
// source: task_server.proto

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type HTTPOption struct {
	Port int32 `protobuf:"varint,1,opt,name=port" json:"port,omitempty"`
}

func (m *HTTPOption) Reset()                    { *m = HTTPOption{} }
func (m *HTTPOption) String() string            { return proto.CompactTextString(m) }
func (*HTTPOption) ProtoMessage()               {}
func (*HTTPOption) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *HTTPOption) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func init() {
	proto.RegisterType((*HTTPOption)(nil), "ckeyer.com.spongebob.protos.HTTPOption")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for HostDaemon service

type HostDaemonClient interface {
	StartHTTP(ctx context.Context, in *HTTPOption, opts ...grpc.CallOption) (*HTTPOption, error)
	StopHTTP(ctx context.Context, in *HTTPOption, opts ...grpc.CallOption) (*HTTPOption, error)
}

type hostDaemonClient struct {
	cc *grpc.ClientConn
}

func NewHostDaemonClient(cc *grpc.ClientConn) HostDaemonClient {
	return &hostDaemonClient{cc}
}

func (c *hostDaemonClient) StartHTTP(ctx context.Context, in *HTTPOption, opts ...grpc.CallOption) (*HTTPOption, error) {
	out := new(HTTPOption)
	err := grpc.Invoke(ctx, "/ckeyer.com.spongebob.protos.HostDaemon/StartHTTP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostDaemonClient) StopHTTP(ctx context.Context, in *HTTPOption, opts ...grpc.CallOption) (*HTTPOption, error) {
	out := new(HTTPOption)
	err := grpc.Invoke(ctx, "/ckeyer.com.spongebob.protos.HostDaemon/StopHTTP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HostDaemon service

type HostDaemonServer interface {
	StartHTTP(context.Context, *HTTPOption) (*HTTPOption, error)
	StopHTTP(context.Context, *HTTPOption) (*HTTPOption, error)
}

func RegisterHostDaemonServer(s *grpc.Server, srv HostDaemonServer) {
	s.RegisterService(&_HostDaemon_serviceDesc, srv)
}

func _HostDaemon_StartHTTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HTTPOption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostDaemonServer).StartHTTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ckeyer.com.spongebob.protos.HostDaemon/StartHTTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostDaemonServer).StartHTTP(ctx, req.(*HTTPOption))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostDaemon_StopHTTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HTTPOption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostDaemonServer).StopHTTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ckeyer.com.spongebob.protos.HostDaemon/StopHTTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostDaemonServer).StopHTTP(ctx, req.(*HTTPOption))
	}
	return interceptor(ctx, in, info, handler)
}

var _HostDaemon_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ckeyer.com.spongebob.protos.HostDaemon",
	HandlerType: (*HostDaemonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartHTTP",
			Handler:    _HostDaemon_StartHTTP_Handler,
		},
		{
			MethodName: "StopHTTP",
			Handler:    _HostDaemon_StopHTTP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "task_server.proto",
}

func init() { proto.RegisterFile("task_server.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 183 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2c, 0x49, 0x2c, 0xce,
	0x8e, 0x2f, 0x4e, 0x2d, 0x2a, 0x4b, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x92, 0x4e,
	0xce, 0x4e, 0xad, 0x4c, 0x2d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x2b, 0x2e, 0xc8, 0xcf, 0x4b, 0x4f,
	0x4d, 0xca, 0x4f, 0x82, 0xc8, 0x15, 0x4b, 0xc9, 0xa4, 0xe7, 0xe7, 0xa7, 0xe7, 0xa4, 0xea, 0x27,
	0x16, 0x64, 0xea, 0x27, 0xe6, 0xe5, 0xe5, 0x97, 0x24, 0x96, 0x64, 0xe6, 0xe7, 0x15, 0x43, 0xa4,
	0x95, 0x14, 0xb8, 0xb8, 0x3c, 0x42, 0x42, 0x02, 0xfc, 0x0b, 0x40, 0x82, 0x42, 0x42, 0x5c, 0x2c,
	0x05, 0xf9, 0x45, 0x25, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xac, 0x41, 0x60, 0xb6, 0xd1, 0x59, 0x46,
	0x2e, 0x2e, 0x8f, 0xfc, 0xe2, 0x12, 0x97, 0xc4, 0xd4, 0xdc, 0xfc, 0x3c, 0xa1, 0x78, 0x2e, 0xce,
	0xe0, 0x92, 0xc4, 0xa2, 0x12, 0x90, 0x2e, 0x21, 0x75, 0x3d, 0x3c, 0x36, 0xeb, 0x21, 0x0c, 0x96,
	0x22, 0x56, 0xa1, 0x12, 0x83, 0x50, 0x1c, 0x17, 0x47, 0x70, 0x49, 0x7e, 0x01, 0xad, 0xcc, 0x77,
	0xe2, 0x88, 0x62, 0x83, 0x08, 0x27, 0x41, 0x68, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1a,
	0x23, 0x50, 0xa2, 0x52, 0x01, 0x00, 0x00,
}
