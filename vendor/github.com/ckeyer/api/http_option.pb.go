// Code generated by protoc-gen-go. DO NOT EDIT.
// source: http_option.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type HTTPOption struct {
	Url string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	// GET, POST, PUT, DELETE, PATCH ..., default GET
	Method string `protobuf:"bytes,2,opt,name=method" json:"method,omitempty"`
	// custom headers
	Headers map[string]string `protobuf:"bytes,3,rep,name=headers" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// random user-agent
	RandUA    bool  `protobuf:"varint,4,opt,name=randUA" json:"randUA,omitempty"`
	UseProxy  bool  `protobuf:"varint,5,opt,name=useProxy" json:"useProxy,omitempty"`
	Goroutine int64 `protobuf:"varint,6,opt,name=goroutine" json:"goroutine,omitempty"`
	// every httpclient send reqeusts.
	Count int64 `protobuf:"varint,7,opt,name=count" json:"count,omitempty"`
}

func (m *HTTPOption) Reset()                    { *m = HTTPOption{} }
func (m *HTTPOption) String() string            { return proto.CompactTextString(m) }
func (*HTTPOption) ProtoMessage()               {}
func (*HTTPOption) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *HTTPOption) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *HTTPOption) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *HTTPOption) GetHeaders() map[string]string {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *HTTPOption) GetRandUA() bool {
	if m != nil {
		return m.RandUA
	}
	return false
}

func (m *HTTPOption) GetUseProxy() bool {
	if m != nil {
		return m.UseProxy
	}
	return false
}

func (m *HTTPOption) GetGoroutine() int64 {
	if m != nil {
		return m.Goroutine
	}
	return 0
}

func (m *HTTPOption) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type HTTPJob struct {
	Uuid   string      `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	Option *HTTPOption `protobuf:"bytes,2,opt,name=option" json:"option,omitempty"`
}

func (m *HTTPJob) Reset()                    { *m = HTTPJob{} }
func (m *HTTPJob) String() string            { return proto.CompactTextString(m) }
func (*HTTPJob) ProtoMessage()               {}
func (*HTTPJob) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *HTTPJob) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *HTTPJob) GetOption() *HTTPOption {
	if m != nil {
		return m.Option
	}
	return nil
}

func init() {
	proto.RegisterType((*HTTPOption)(nil), "ckeyer.api.HTTPOption")
	proto.RegisterType((*HTTPJob)(nil), "ckeyer.api.HTTPJob")
}

func init() { proto.RegisterFile("http_option.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 283 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x41, 0x4b, 0xfb, 0x40,
	0x10, 0xc5, 0x49, 0xd2, 0x24, 0xed, 0xf4, 0x7f, 0xf8, 0x3b, 0x48, 0x59, 0x8a, 0x87, 0x50, 0x2f,
	0x39, 0xed, 0xa1, 0x5e, 0xa4, 0xe0, 0x41, 0x41, 0x28, 0x82, 0x58, 0x42, 0xbd, 0x78, 0x91, 0xb4,
	0x19, 0x4c, 0x48, 0xcd, 0x84, 0xed, 0xae, 0x98, 0x8f, 0xe2, 0xb7, 0x95, 0x6c, 0x52, 0xe3, 0xc1,
	0xdb, 0xfc, 0x66, 0xe6, 0x3d, 0xf6, 0xcd, 0xc2, 0x59, 0xae, 0x75, 0xfd, 0xca, 0xb5, 0x2e, 0xb8,
	0x92, 0xb5, 0x62, 0xcd, 0x08, 0xfb, 0x92, 0x1a, 0x52, 0x32, 0xad, 0x8b, 0xc5, 0x97, 0x0b, 0xb0,
	0xde, 0x6e, 0x37, 0x4f, 0x76, 0x01, 0xff, 0x83, 0x67, 0xd4, 0x41, 0x38, 0x91, 0x13, 0x4f, 0x92,
	0xb6, 0xc4, 0x19, 0x04, 0xef, 0xa4, 0x73, 0xce, 0x84, 0x6b, 0x9b, 0x3d, 0xe1, 0x0d, 0x84, 0x39,
	0xa5, 0x19, 0xa9, 0xa3, 0xf0, 0x22, 0x2f, 0x9e, 0x2e, 0x2f, 0xe5, 0x60, 0x2b, 0x07, 0x4b, 0xb9,
	0xee, 0xb6, 0xee, 0x2b, 0xad, 0x9a, 0xe4, 0xa4, 0x69, 0x6d, 0x55, 0x5a, 0x65, 0xcf, 0xb7, 0x62,
	0x14, 0x39, 0xf1, 0x38, 0xe9, 0x09, 0xe7, 0x30, 0x36, 0x47, 0xda, 0x28, 0xfe, 0x6c, 0x84, 0x6f,
	0x27, 0x3f, 0x8c, 0x17, 0x30, 0x79, 0x63, 0xc5, 0x46, 0x17, 0x15, 0x89, 0x20, 0x72, 0x62, 0x2f,
	0x19, 0x1a, 0x78, 0x0e, 0xfe, 0x9e, 0x4d, 0xa5, 0x45, 0x68, 0x27, 0x1d, 0xcc, 0x57, 0xf0, 0xef,
	0xf7, 0x03, 0xda, 0x80, 0x25, 0x35, 0xa7, 0x80, 0x25, 0x35, 0xad, 0xee, 0x23, 0x3d, 0x18, 0xea,
	0xf3, 0x75, 0xb0, 0x72, 0xaf, 0x9d, 0xc5, 0x23, 0x84, 0x6d, 0x8e, 0x07, 0xde, 0x21, 0xc2, 0xc8,
	0x98, 0x22, 0xeb, 0x75, 0xb6, 0x46, 0x09, 0x41, 0x77, 0x56, 0xab, 0x9c, 0x2e, 0x67, 0x7f, 0x1f,
	0x20, 0xe9, 0xb7, 0xee, 0xfc, 0x17, 0x2f, 0xad, 0x8b, 0x5d, 0x60, 0x3f, 0xe1, 0xea, 0x3b, 0x00,
	0x00, 0xff, 0xff, 0x4d, 0x11, 0x2d, 0xb1, 0x99, 0x01, 0x00, 0x00,
}
